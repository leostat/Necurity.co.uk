<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>necurity.co.uk</title>
		<description></description>
		<link>http://necurity.co.uk</link>
		<atom:link href="http://necurity.co.uk/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Fun With American Fuzzy Lop - A quick tutorial</title>
				<description>&lt;div id=&quot;pagemenu&quot;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Install&quot;&gt;Installing and linking your target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Crashing&quot;&gt;Making Test Cases and Fuzzing &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Exploring&quot;&gt;Exploring Crashes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;pagesummary&quot;&gt;
&lt;h2 id=&quot;Summary&quot;&gt; &lt;a&gt;Summary &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
I have recently been playing with AFL by Lcamtuf, a high performance fuzzer that is exceedingly efficient at finding problems in code when you either have or dont have the source code.
&lt;/p&gt;
&lt;p&gt;
The most efficient way to use AFL is to recompile your target application using the modified version of GCC, this allows AFL to pick up on hangs and crashes. I wanted to write a little piece on using the fuzzer from installing, choosing test cases, finding a crash in a application to following it through to see if we can do anything &quot;Evil&quot; with it. I chose to have a look at LibreSSL as the codebase is huge and it has multiple places where complex user input is used. AFL has been used to fuz many many projects already, so dont be surprised if you find a crash it may have already been reported! To fuzz a project you need test cases, in this post the test cases will be a Public Certificate, a Certificate Signing Request and a Private Key. 
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;maincontent&quot;&gt;
&lt;h2 id=&quot;Install&quot;&gt; &lt;a&gt; Installing and linking your target &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
AFL is available pre-compiled on Arch, but anything else all you have to do is grab the source, this is easy enough so we grab it and compile.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz
tar -xvf 
wget http://lcamtuf.coredump.cx/afl/releases/af
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;afl*
make
&lt;span class=&quot;c&quot;&gt;# If you want to move the executables to your path you can also do make install&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# make install;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;
After this you need to chose something to fuzz. In this mini guide I chose LibreSSL as why not, I was curious on if AFL would be able to create a valid cert that validates in some &quot;weird&quot; way, it also gives lots of mangled SSL certs to throw at Internet Explorer. So lets grab the source and compile it. When installing we change the install DIR as we don't want the rebuilt package effecting the local systems OpenSSL.
&lt;/p&gt;
&lt;p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.1.6.tar.gz
tar -xvf libressl-2.1.6.tar.gz
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;libressl-2.1.6/
&lt;span class=&quot;nv&quot;&gt;CC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/afl/afl-1.57b/afl-gcc ./configure
make check
mkdir /root/testing
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DESTDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/root/testing/
make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
	
&lt;/p&gt;
&lt;h2 id=&quot;Crashing&quot;&gt; &lt;a&gt; Making Test Cases and Fuzzing &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
Now you have it compiled you need to create some test cases to run against LibreSSL. Here we create a Public certificate, Private Key, and Certificate request, and as by suggestion of the &lt;a href=&quot;http://lcamtuf.coredump.cx/afl/README.txt&quot;&gt; Readme&lt;/a&gt; we keep the size of them to a minimum. After generating these we feed them into afl and see what it finds. We move each of the user generated files into a in folder for afl to process, and also create a out folder for afl to place its findings. The -- specifies bash to stop processing command flags and the @@ is afl's placeholder where it inserts the test cases. If all goes well AFL will spin up and start churning out other test cases to run through. Before we are able to start AFL we need to export the LD_LIBRARY_PATH environment variable so that LibreSSL uses the compiled library rather than the system ones
&lt;/p&gt;
&lt;p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/root/testing/usr/local/lib&amp;quot;&lt;/span&gt;
/root/testing/usr/local/bin/openssl req -x509 -nodes -days &lt;span class=&quot;m&quot;&gt;365&lt;/span&gt; -newkey rsa:512 -keyout privateKey.key -out certificate.crt -out CSR.csr
screen
mkdir incrt inkey incsr outcrt outkey outcsr
~/afl/afl-1.57b/afl-fuzz -i inkey -o outkey -- /root/testing/usr/local/bin/openssl x509 -in @@ -text -noout
~/afl/afl-1.57b/afl-fuzz -i incsr -o outcsr -- /root/testing/usr/local/bin/openssl x509 -in @@ -text -noout
~/afl/afl-1.57b/afl-fuzz -i incrt -o outcrt -- /root/testing/usr/local/bin/openssl x509 -in @@ -text -noout&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt; Then after a while your hoping for some crashes, the files will be stored in the out directory we specified before.  &lt;/p&gt;
&lt;h2 id=&quot;Exploring&quot;&gt; &lt;a&gt; Exploring Crashes &lt;/a&gt;&lt;/h2&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~/afl/afl-1.57b/afl-fuzz -i incrash -o outcrash -- /root/testing/usr/local/bin/openssl x509 -in @@ -text -noout
                       american fuzzy lop 1.57b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;openssl&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐
│        run &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; : &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; days, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; hrs, &lt;span class=&quot;m&quot;&gt;27&lt;/span&gt; min, &lt;span class=&quot;m&quot;&gt;38&lt;/span&gt; sec      │  cycles &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;      │
│   last new path : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; days, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; hrs, &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; min, &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt; sec      │  total paths : &lt;span class=&quot;m&quot;&gt;1830&lt;/span&gt;   │
│ last uniq crash : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; days, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; hrs, &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt; min, &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt; sec      │ uniq crashes : &lt;span class=&quot;m&quot;&gt;108&lt;/span&gt;    │
│  last uniq hang : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; days, &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; hrs, &lt;span class=&quot;m&quot;&gt;54&lt;/span&gt; min, &lt;span class=&quot;m&quot;&gt;39&lt;/span&gt; sec      │   uniq hangs : &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt;     │
├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤
│  now processing : &lt;span class=&quot;m&quot;&gt;1708&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;93.33%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     │    map density : &lt;span class=&quot;m&quot;&gt;5453&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8.32%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          │
│ paths timed out : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.00%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;         │ count coverage : 3.07 bits/tuple       │
├─ stage progress ────────────────────┼─ findings in depth ────────────────────┤
│  now trying : bitflip 1/1           │ favored paths : &lt;span class=&quot;m&quot;&gt;318&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;17.38%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           │
│ stage execs : 854/4176 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;20.45%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     │  new edges on : &lt;span class=&quot;m&quot;&gt;511&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;27.92%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           │
│ total execs : 40.1M                 │ total crashes : 71.0k &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;108&lt;/span&gt; unique&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     │
│  &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;speed : 138.9/sec             │   total hangs : &lt;span class=&quot;m&quot;&gt;249&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;18&lt;/span&gt; unique&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        │
├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤
│   bit flips : 714/1.41M, 100/1.41M, 100/1.41M       │    levels : &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;          │
│  byte flips : 2/175k, 8/170k, 4/172k                │   pending : &lt;span class=&quot;m&quot;&gt;1424&lt;/span&gt;       │
│ arithmetics : 312/9.30M, 2/247k, 0/14.1k            │  pend fav : &lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;         │
│  known ints : 14/1.08M, 2/6.31M, 10/8.60M           │ own finds : &lt;span class=&quot;m&quot;&gt;1829&lt;/span&gt;       │
│  dictionary : 0/0, 0/0, 174/4.97M                   │  imported : n/a        │
│       havoc : 439/4.70M, 0/0                        │  variable : &lt;span class=&quot;m&quot;&gt;1023&lt;/span&gt;       │
│        trim : 12.33%/86.6k, 3.65%                   ├────────────────────────┘
└─────────────────────────────────────────────────────┘             &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;cpu: 76%&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@fw ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# ls /root/testing/usr/local/outkey/crashes/&lt;/span&gt;
id:000000,sig:11,src:000000,op:flip1,pos:32           id:000028,sig:11,src:000065,op:flip1,pos:59            id:000056,sig:11,src:000748,op:flip2,pos:82            id:000084,sig:11,src:001255,op:flip1,pos:57
id:000001,sig:11,src:000000,op:flip1,pos:58           id:000029,sig:11,src:000065,op:flip1,pos:59            id:000057,sig:11,src:000748,op:flip2,pos:470           id:000085,sig:11,src:001255,op:flip1,pos:61&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
After we have a crash we need to generate other test cases around this crash, this allows us to see if we have any control over registers. (Really at this point we should chuck it through GDB to see what the crash is but i'm skipping this till later). It just happens that most of these are all the same crash after analysis so copy any across on to the folder then to start the fuzzing we pass the -C flag on afl. What this does is keep the program in a crashing state while creating other test cases with cause a similar crash. We create new folders and start the fuzzing again. 
&lt;/p&gt;

&lt;p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;peruvian were-rabbit 1.57b &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;openssl&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐
│        run &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; : &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; days, &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; hrs, &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt; min, &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; sec      │  cycles &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;      │
│   last new path : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; days, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; hrs, &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; min, &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; sec       │  total paths : &lt;span class=&quot;m&quot;&gt;564&lt;/span&gt;    │
│ last uniq crash : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; days, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; hrs, &lt;span class=&quot;m&quot;&gt;35&lt;/span&gt; min, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; sec       │ uniq crashes : &lt;span class=&quot;m&quot;&gt;235&lt;/span&gt;    │
│  last uniq hang : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; days, &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt; hrs, &lt;span class=&quot;m&quot;&gt;50&lt;/span&gt; min, &lt;span class=&quot;m&quot;&gt;36&lt;/span&gt; sec     │   uniq hangs : &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;      │
├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤
│  now processing : &lt;span class=&quot;m&quot;&gt;559&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;99.11%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      │    map density : &lt;span class=&quot;m&quot;&gt;2190&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3.34%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          │
│ paths timed out : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0.00%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;         │ count coverage : 1.63 bits/tuple       │
├─ stage progress ────────────────────┼─ findings in depth ────────────────────┤
│  now trying : havoc                 │ favored paths : &lt;span class=&quot;m&quot;&gt;145&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;25.71%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           │
│ stage execs : 16.0k/30.0k &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;53.21%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  │  new edges on : &lt;span class=&quot;m&quot;&gt;228&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;40.43%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;           │
│ total execs : 28.1M                 │   new crashes : 7.59M &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;235&lt;/span&gt; unique&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     │
│  &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;speed : 155.4/sec             │   total hangs : &lt;span class=&quot;m&quot;&gt;373&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; unique&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;         │
├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤
│   bit flips : 169/938k, 41/938k, 41/938k            │    levels : &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;         │
│  byte flips : 0/117k, 11/114k, 19/115k              │   pending : &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;        │
│ arithmetics : 94/6.19M, 0/178k, 0/3083              │  pend fav : &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;          │
│  known ints : 20/715k, 7/4.22M, 18/5.79M            │ own finds : &lt;span class=&quot;m&quot;&gt;563&lt;/span&gt;        │
│  dictionary : 0/0, 0/0, 53/897k                     │  imported : n/a        │
│       havoc : 318/6.87M, 0/0                        │  variable : &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;          │
│        trim : 2.49%/56.1k, 3.84%                    ├────────────────────────┘
└─────────────────────────────────────────────────────┘             &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;cpu: 78%&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;
Once we have left it generating test cases for a while we can chuck them through GDB to get more information about the crash. 
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;./lib&amp;quot;&lt;/span&gt;
gdb ./bin/openssl
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;args rsa -in &lt;span class=&quot;s2&quot;&gt;&amp;quot;./crashout/crashes/id:000049,sig:11,src:000000,op:havoc,rep:2&amp;quot;&lt;/span&gt; -check
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; r
Starting program: /root/testing/usr/local/bin/openssl rsa -in &lt;span class=&quot;s2&quot;&gt;&amp;quot;./crashout/crashes/id:000049,sig:11,src:000000,op:havoc,rep:2&amp;quot;&lt;/span&gt; -check
Missing separate debuginfos, use: debuginfo-install glibc-2.20-8.fc21.x86_64

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff74b4117 in pkey_cb &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2, &lt;span class=&quot;nv&quot;&gt;pval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fffffffd938, &lt;span class=&quot;nv&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;optimized out&amp;gt;, &lt;span class=&quot;nv&quot;&gt;exarg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at asn1/p8_pkey.c:71
&lt;span class=&quot;m&quot;&gt;71&lt;/span&gt;                      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;key-&amp;gt;pkey-&amp;gt;value.octet_string&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;gdb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; i r
rax            0x74a8c0 7645376
rbx            0x7ffff7ab4e40   140737348587072
rcx            0x0      0
rdx            0x0      0
rsi            0x7fffffffd938   140737488345400
rdi            0x2      2
rbp            0x7fffffffd938   0x7fffffffd938
rsp            0x7fffffffd838   0x7fffffffd838
r8             0x74a610 7644688
r9             0xfffffffffffffffc       -4
r10            0x748bb0 7637936
r11            0xd000000        218103808
r12            0x7ffff74b4050   140737342292048
r13            0x2      2
r14            0x2      2
r15            0x7ffff7ac6410   140737348658192
rip            0x7ffff74b4117   0x7ffff74b4117 &amp;lt;pkey_cb+199&amp;gt;
eflags         0x10246  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; PF ZF IF RF &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
cs             0x33     51
ss             0x2b     43
ds             0x0      0
es             0x0      0
fs             0x0      0
gs             0x0      0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; After throwing a few test cases through GDB we can see that we dont have control over any registers (Boo) so there isnt much evil to be done here. Still crashes are worth reporting. In this case the bug had already been reported &lt;a href=&quot;&quot;&gt;Here&lt;/a&gt;, Oh well!&lt;/p&gt;


&lt;p&gt;
As a little amusing side fact I found another blog with a similar piece and very similar title while writing this one, I guess great minds  &lt;a href=&quot;http://0x90909090.blogspot.co.uk/2015/01/lets-have-some-fun-with-afl.html&quot;&gt; think alike&lt;/a&gt;. 
&lt;/p&gt;
&lt;/div&gt;
</description>
				<pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
				<link>http://necurity.co.uk/netsec/2015/03/30/Fun-With-AFL.html</link>
				<guid isPermaLink="true">http://necurity.co.uk/netsec/2015/03/30/Fun-With-AFL.html</guid>
			</item>
		
			<item>
				<title>Connection Refeused with Hydra against TLS</title>
				<description>&lt;div id=&quot;pagesummary&quot;&gt;
&lt;h2 id=&quot;Summary&quot;&gt; &lt;a&gt;Summary &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
Just a super quick one today. During a test I noticed some strange behaviour with the standard Hydra which ships with Kali (Version 8.1) when scanning sites with no SSLv3 support.
&lt;/p&gt;
&lt;p&gt;
So if you see something along the lines of this

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@kali:~# hydra -s &lt;span class=&quot;m&quot;&gt;443&lt;/span&gt; -S -l admin -p adminpass necurity.co.uk  https-post-form  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/php/a:user=^USER^&amp;amp;pass=^PASS^:DENIED&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;VERBOSE&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Could not create an SSL session: error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; of &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; target completed, &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; valid passwords found
Hydra &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;http://www.thc.org/thc-hydra&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; finished at 2015-03-24 21:52:57&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


Then grab the latest version from git and enjoy breaking in once more


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;root@kali:~/git# git clone git@github.com:vanhauser-thc/thc-hydra.git
root@kali:~/git# &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;thc-hydra/
root@kali:~/git/thc-hydra# ./configure 

root@kali:~/git/thc-hydra# ./hydra -s &lt;span class=&quot;m&quot;&gt;443&lt;/span&gt; -S -l admin -p adminpass necurity.co.uk  https-post-form  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/php/a:user=^USER^&amp;amp;pass=^PASS^:DENIED&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;443&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;http-post-form&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; host: necurity.co.uk   login: admin   password: adminpass
&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; of &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; target successfully completed, &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; valid password found
Hydra &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;http://www.thc.org/thc-hydra&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; finished at 2015-03-24 21:57:29&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;
So why is this? Its because by default hydra used to just use a SSLv3 hello no matter what as thats what everyone supported, but since SSLv3 has been depreciated and has found itself in the sights of PCI you will find more and more sites turning SSLv3 off. You may encounter this in other tools as well, most of the time they just need rebuilding or a extra flag adding. As a side bug once you try and fail to use sslv3 on one of these servers Hydra will skitz out and start flooding the target with requests, OOPS!
&lt;/p&gt;
&lt;/div&gt;
</description>
				<pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
				<link>http://necurity.co.uk/netsec/2015/03/24/Hydra-Vs-TLS.html</link>
				<guid isPermaLink="true">http://necurity.co.uk/netsec/2015/03/24/Hydra-Vs-TLS.html</guid>
			</item>
		
			<item>
				<title>Studying for and taking the CREST CPSA Exam</title>
				<description>&lt;div id=&quot;pagemenu&quot;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#whatsit&quot;&gt; What is the CPSA Exam? &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tech&quot;&gt; A Look at the technical Syllabus&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tips&quot;&gt; Generic exam tips and tricks &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#reading&quot;&gt; Further Reading | Other Resources |Revision notes&lt;/a&gt; &lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;pagesummary&quot;&gt;
&lt;h2 id=&quot;Summary&quot;&gt; &lt;a&gt;Summary &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
I Have recently studied for and passed the CREST CPSA Exam, I though I would share some thoughts and my Pre-Exam revision Notes to help other people thinking of taking this new exam from crest as when looked I could not find much about it!
&lt;/p&gt;
&lt;p&gt;
First things first though is I would like to highlight that the CPSA exam is under both the &lt;a href=&quot;http://www.crest-approved.org/wp-content/uploads/1401-Code-of-Conduct-Individual-v4.0.pdf&quot;&gt; Code of Ethics &lt;/a&gt;, and has a NDA over it. This post is NOT about the actual content of the exam. It is merely my experience with the examination process, and the Technical syllabus. A copy of the notes for candidates covering the exam type, question examples and such is available from &lt;a href=&quot;http://www.crest-approved.org/wp-content/uploads/crest-notes-for-candidates-CPSA.pdf&quot;&gt; here &lt;/a&gt; and the technical syllabus is available &lt;a href=&quot;http://www.crest-approved.org/wp-content/uploads/Technical_Syllabus-CREST_Practitioner-v1-1.pdf&quot;&gt; here&lt;/a&gt;. Please check the &lt;a href=&quot;http://www.crest-approved.org/professional-examinations/practitioner-security-analyst/index.html&quot;&gt; CPSA Page &lt;/a&gt; on the crest website for the most upto date version of the notes for candidates and the Technical Syllabus. If anything on this page is deemed against the Code of Ethics or the Non Disclosure agreement or section 1.2 of the notes for candidates then please contact me and so we can discuss what needs removing. As of the 23rd of March no content has been removed.
&lt;/p&gt;

&lt;p&gt;
A quick TL;DR for this is that personally I found the exam syllabus interesting and a good intro into the CREST way of doing exams. The hard part of this exam for me was the time management for the 240 questions in the time allocated!. I found it less focused on Exploiting, more focused on Finding.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;maincontent&quot;&gt;
&lt;h2 id=&quot;whatsit&quot;&gt; &lt;a&gt; What is the CPSA Exam?  &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
So what is the CPSA And who should take it? The Crest Certified practitioner security analyst is the minimum required exam for being a crest team member. It sits beneath the CRT exam and looks at your core concepts of Information Security, Networking and System Administration. Focused less around further exploitation and more around being able to locate some pretty basic common security issues such as SQL injection. If you have any background in Info Sec (such as a degree, previous work experience, or just a working interest) you shouldn't find the exam too hard to get through. Its aimed at people starting in the infosec industry, so if you have already been working as a tester for a while you may want to skip straight to the CRT exam. 
&lt;/p&gt;


&lt;h2 id=&quot;tech&quot;&gt; &lt;a&gt; A Look at the Technical Syllabus  &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
Crest exams give you the required information different from some of the other ones out there, rather than giving you a set resource list and reference material they give you a syllabus to follow and that's about it. The syllabus has 6 sections for the CPSA as quickly outlined below. Theres quite a lot of cross over between this, CISSP, OSCP and CCNA so if you have done any of those before then you will find this quite easy.
&lt;/p&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
Core Networking
&lt;/td&gt;

&lt;td&gt;
This section covers your basic networking and network services, Do you know your IP address from your MAC address, how routing and networking works, Which IP address are non routable? You should be familiar with this section if you have worked with networks before and you should be relatively OK here.
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
Security Architecture and Design
&lt;/td&gt;

&lt;td&gt;
Covering some of the more common topics around security. Firewalls, Encryption and Architecture should be second nature for any tester. You also need to be familiar with problems with BYOD and you also need to be aware of the Laws of England and how they impact your job as a tester. 
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
Windows systems
&lt;/td&gt;

&lt;td&gt;
The most common operating system you will encounter everyday, knowing which version of windows server shipped with what version of IIS and kernel can be useful from time to time when nmap or nessus cant make up its mind what OS your target is. Knowing how windows works, How and what the different functions of AD do and what the most common weaknesses you will encounter are. Also knowing how to harden and fix the problems you find.
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
Unix Systems
&lt;/td&gt;

&lt;td&gt;
Although they usually number less in work environment you can do much much more with a Linux server. Being familiar with both RPM based and DEB based systems is a must.
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
Penetration testing
&lt;/td&gt;

&lt;td&gt;
The more fun topic for most people. This is at a basic level though and is more aimed at do you know the most common web-app problems, when you see id= what do you instantly think? 
&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
Incident response and analysis
&lt;/td&gt;

&lt;td&gt;
Dont let the title fool you, this is about reading logs, PCAPS and knowing how to use strings and hexdump. 
&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;p&gt;
It can look a bit daunting if you don't recognise everything on there, but it doesn't take that long to read up on everything. Around a month would be plenty of time to get comfortable with it, depending on how long you spend reading and how much you already know of course. Don't get bogged down in knowing everything around every topic either, remember this is a higher level exam then the CRT, for example you need to know how to find a SQL injection, how to use it, and what maybe a tool you could use to exploit it further, and on the windows side you may need to know what the different versions of IIS Microsoft launched along with what platforms along with the major security changes, but not all the nitty gritty details about how IIS works.
&lt;/p&gt;

&lt;h2 id=&quot;tips&quot;&gt; &lt;a&gt; Generic Exam Tips and Tricks  &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
CPSA is a open book exam, don't be afraid to take in your condensed revision notes or a book or two. Although its open book time is very tight so you wont want to be having to look through pages and pages of notes and a few books so only take in things that you will need! Going into the exam make sure that your laptop is set up how you use it every day. The laptop gets wiped at the end of the exam (make sure you can take the drive out!) so it may be tempting to just stick something like Kali or the fedora security spin on there and be done with it, but keep in mind that this may not have all the tools on or set up and ready to use.&lt;/p&gt;

&lt;p&gt; The CPSA page suggests some of the books to read before the exam, and there is one on their list I like to keep around for quick reference and that is the Red Team Field Manual &lt;a href=&quot;http://www.amazon.co.uk/Rtfm-Red-Team-Field-Manual/dp/1494295504&quot;&gt;RTFM&lt;/a&gt;), over time working as a tester you will probably write your own version of this anyway, but its a great starting point covering some common tools, networking, generic Windows / Linux &quot;stuff&quot;, and a couple of common old CVE's that you may still see on engagements. &lt;/p&gt;

&lt;p&gt;Keep an eye on your time in the exam, Crest recommend up to a hour on the questions then the rest of the time on the practical exercise, how you use your time is up to you but keep in mind the practical is over double the size of the questions as its not just recall of which answer is correct. Dont spend too long on questions, if you dont know an answer mark it with a star, colour, flag or whatever and come back to it on your second pass of the paper, if you still dont know it is take a educated guess, there is no negative marking so apply your brain and pick what looks right. &lt;/p&gt;

&lt;p&gt;With the practical make you have all the information gathering done at the beginning as you don't want to get halfway through and realise you have not got a clue where the web servers are! Also dont be afraid to ask your examiner questions if something seems &quot;wrong&quot;, for example if a service your meant to be querying is being super super slow or not replying at all, ask, your heavy handed scanning at the begging may have made the service slow or unresponsive. &lt;/p&gt;

&lt;p&gt;
And lastly Keep Calm don't panic, its easy really! And once you've finished start revising for the CRT ;) 
&lt;/p&gt;

&lt;h2 id=&quot;reading&quot;&gt; &lt;a&gt; Further Reading | Other Resources | Revision Notes  &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
One of the ways I personally study for exams is I keep a note of headings of everything I need to know. This allows for quick reference in the exam (its open book after all) and an insight into what I need to know. I have attached my KeepNote notebook to this page in case anybody finds it useful. This is following the 1.0 syllabus ONLY, it has not been modified with anything taken from the exam paper itself. You will notice if you open it that it is not indexed, lots of spelling mistakes and most likely repeated content, its just how I keep my notes! These are coming soon tm after I get rid of the majority of spelling mistakes and any references to internal stuff.
&lt;/p&gt;
&lt;p&gt;
There are also some other super useful resources I found to help my revising. I have linked to them below with a quick explanation of why I found it useful. 
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt; Resource &lt;/td&gt;
&lt;td&gt; Whats it good for? &lt;/td&gt;
&lt;tr&gt;
&lt;td&gt; Wikipedia pages &lt;/td&gt;
&lt;td&gt; Wiki'ing the topic in question is the quickest way to learn about it. Wikipedia has loads of well written tech pages to read through and digest &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;http://www.ucs.cam.ac.uk/support/windows-support/winsuptech&quot;&gt;Cambridge AD Information&lt;/a&gt;&lt;/td&gt;
&lt;td&gt; Cambridge University publishes information about setting up and managing windows domains. Although this is aimed at the university systems the information is generic and helped me wrap my brain around Windows Domains&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
&lt;a href=&quot;http://pwndizzle.blogspot.co.uk/2014/12/crest-crt-exam-preparation.html&quot;&gt; Other peoples Blogs&lt;/a&gt;
&lt;/td&gt;

&lt;td&gt; Other people that have taken the Crest exams usualy blog about it, some people make useful snippet guides so have a Google and see what you can find.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;
&lt;a href=&quot;https://technet.microsoft.com/en-gb/&quot;&gt;Technet &lt;/a&gt;&lt;/td&gt;
&lt;td&gt; If you ever need more information around windows systems technet will have have the answers for you&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&quot;&gt; OWASP
&lt;td&gt; The Open Web Application Security Project covers as the name says common web app problems. Knowing the top ten is always good to know, and the testing guide has a wealth of information to absorb&lt;/td&gt;

&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-857-network-and-computer-security-spring-2014/&quot;&gt;MIT Open Courseware &lt;/a&gt;&lt;/td&gt;
&lt;td&gt; MIT recently open sourced their CS undergrad course. I highly recommend at least watching the youtube series, its great for the unix security part of cpsa 

&lt;tr&gt;
&lt;td&gt; &lt;a href=&quot;http://www.noexcuselist.com/&quot;&gt; Other course materials &lt;/a&gt;  &lt;/td&gt; 
&lt;td&gt; MIT isnt alone in opening up learning materials many other universities  do the same!&lt;/td&gt;
&lt;tr&gt;



&lt;/tr&gt;&lt;/tr&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;/div&gt;
</description>
				<pubDate>Fri, 13 Mar 2015 00:00:00 +0000</pubDate>
				<link>http://necurity.co.uk/netsec/2015/03/13/crest_cpsa_exam.html</link>
				<guid isPermaLink="true">http://necurity.co.uk/netsec/2015/03/13/crest_cpsa_exam.html</guid>
			</item>
		
			<item>
				<title>Redhat Spacewalk Tutorial | Kickstarts and Configuration Management</title>
				<description>&lt;div id=&quot;pagemenu&quot;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#config&quot;&gt;Configuration Files&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kickstart&quot;&gt;Kickstarts&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#profiles&quot;&gt;Package Profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#compare&quot;&gt;Comparing Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#res&quot;&gt;Other Resources&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;pagesummary&quot;&gt;
&lt;h2 id=&quot;Summary&quot;&gt; &lt;a&gt;Summary &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
Spacewalk offers the ability to generate and deploy Kickstarts (standard builds, keep an eye on packages that are installed on the system as well as compare any file that is on the remote machine to a local copy, giving I.T management a overview of which systems require patching or are not conforming to standards`. In this post I will go through the kickstart creation process and Spacewalks configuration management
&lt;/p&gt;&lt;p&gt;
This is a continuation of the &lt;a href=&quot;/tag/tech/spacewalk&quot;&gt; Spacewalk series &lt;/a&gt;, more information such as the initial setup and other features is available from the tag index. The establishment of standards and baselines in an enterprise environment is a important step toward improving the general state of information security. It allows the assurance that all systems used within the business meet minimum security requirements. 
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;maincontent&quot;&gt;
&lt;h2 id=&quot;config&quot;&gt; &lt;a&gt; Configuration files  &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
Configuration files are group by channels, and configuration channels are assigned to systems through activation keys. By grouping config's and activation keys by function, management of servers becomes a breeze!. Configuration files can be managed via either the web interface under the configuration tab or via spacecmd. Spacecmd offers the following config management functions as of spacewalk 2.2. I highly recommend becoming familiar with the use of spacecmd as it makes spacewalk management much easier


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;spacecmd &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;SSM:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;gt; configchannel_
configchannel_addfile      configchannel_create       configchannel_diff         configchannel_forcedeploy  configchannel_listfiles    configchannel_sync
configchannel_backup       configchannel_delete       configchannel_export       configchannel_import       configchannel_listsystems  configchannel_updatefile
configchannel_clone        configchannel_details      configchannel_filedetails  configchannel_list         configchannel_removefiles  configchannel_verifyfile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


Configuration channels can hold any files, however by default there is a maximum file size that it is able to hold, this can be modified by setting the variables   maximum_config_file_size and web.maximum_config_file_size in /etc/rhn/rhn.conf. This will be required if you wish to store larger files such as file archives within spacewalk. &lt;br /&gt;

When creating files through the web interface it is possible to set the file ownership, permissions and SELinux context, setting these correctly can save hours of headache in the future!.
&lt;/p&gt;
&lt;p&gt;
Once you have uploaded all the files you wish to be managed by spacewalk you must assign your configuration channel to an activation key. You are able to have multiple configuration channels per activation key, if there are conflicting files within two configuration channels then the channel with the higher priority within the activation key will be used. If registering a system with multiple activation keys then the order of activation keys is used to decide the channel priority with the first activation key being used as the primary source of files, secondary key's configuration files will be deployed but will not overide any files managed from the first activation key.   
&lt;/p&gt;
&lt;p&gt;
To use the configuration file deployment within activation keys the permission must be set within the key, this can be done by setting the Provisioning and Monitoring entitlements, followed by adding the configuration file permission. 
&lt;/p&gt;

&lt;h2 id=&quot;kickstart&quot;&gt; &lt;a&gt; KickStarts  &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
Once adding all you configuration files to the channel, and assigning the channel to the activation key you are then able to move onto creating a kickstart to get a standard build process moving. In the web interface browse to Systems -&amp;gt; Kickstarts -&amp;gt; Profiles and click the create new kickstart. Follow the wizard choosing your settings, when setting the root password keep in mind that although it is stored in a hashed format, it is publicly available to anyone who has access to the spacewalk server, so setting a strong but deault password is recommend.
&lt;/p&gt;
&lt;p&gt;
Under the Details tab, check the logging options and preserve ks.cfg to save a log to the booted server for future reference. Go through selecting all te options you want, such as enabling configuration management, selecting activation keys and adding Pre / post scripts. And thats all there really is to kickstarts!
&lt;/p&gt;

&lt;/div&gt;
</description>
				<pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
				<link>http://necurity.co.uk/netsec/2015/01/27/kickstart_config_tutorial.html</link>
				<guid isPermaLink="true">http://necurity.co.uk/netsec/2015/01/27/kickstart_config_tutorial.html</guid>
			</item>
		
			<item>
				<title>Redhat Spacewalk Tutorial | Installation, RPM's, Kickstarts and Clients</title>
				<description>&lt;div id=&quot;pagemenu&quot;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Summary&quot;&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Installation&quot;&gt;Installation &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#PXE&quot;&gt;Content Management and PXE Booting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Clients&quot;&gt;Client Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Backup&quot;&gt;Backing it all up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Resources&quot;&gt;Useful resources and Troubleshooting &lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#All&quot;&gt; The All in one Spacewalk script&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;main&gt;
&lt;div id=&quot;pagesummary&quot;&gt;
&lt;h2 id=&quot;Summary&quot;&gt; &lt;a&gt;Summary &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
Redhat's Spacewalk is a management solution to allow controlled patch deployment, maintenance of configuration files, system deployment through PXE for both virtual and bare-metal systems while also offering monitoring of system status, the automatic inventory cataloguing of registered clients and security auditing of systems all in a centralised manner. This post will go through the installation of the program as well as the set up of a repository, PXE booting and client registration.
&lt;/p&gt;&lt;p&gt;
Red Hat Spacewalk is the open source fork of Red Hat Satellite offering the same management functionality, but without the official support. As Spacewalks release cycle is much faster then satellite's it does occasionally get more features than its paid counterpart, however it does lose the ability to manage Red Hat servers. You also must manually import errata auditing information in as this is not included in the CentOS RPM packages. 
&lt;/p&gt;

&lt;p&gt;

This is the first in a series of posts on how to use Spacewalk, &lt;a href=&quot;/tag/tech/spacewalk&quot;&gt;  The Spacewalk tag Index  &lt;/a&gt;contains links to the other articles and offers a brief overview of each post, with future posts going through some of the other features such as OSCAP vulnerability reporting, Spacewalk proxies and Enterprise build standardisation.
&lt;/p&gt;

&lt;p&gt;
Throughout this I assume that you already have some of the basics needed to use Spacewalk with CentOS, which are, CentOS(!), a DHCP server capable of PXE, a DNS server and client boxes. It will aim to walk you through the installation of the service step by step. 
&lt;/p&gt;

&lt;p&gt;
The &lt;a href=&quot;/scripts/allinone.txt&quot;&gt;&quot;All in one&quot;&lt;/a&gt; script at the end aims to do all of this automatically, I don't recommend running this unless you are familiar with bash and read it first. It has a simple check to make sure you don't just run it by accident, which will force you to read the script. It will also call home to my server, (just a wget to allinonespacewalkused) this can be removed by deleting line +250. It uses a hard coded root account, this should be removed before putting into production.
&lt;/p&gt;

&lt;/div&gt;

&lt;div id=&quot;maincontent&quot;&gt;
&lt;h2 id=&quot;Installation&quot;&gt; &lt;a&gt;Installation &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
Spacewalk like most Linux programs is pretty easy to install and get up running, however the CentOS page on it is out of date! You have a choice of using Oracle (10g+) or Postgres(8.4+) as the database back end and throughout this tutorial Postgres is the one of choice with it being installed on CentOS 6.6, however these instructions should work for any of the CentOS 6 family. Further details on the install of Spacewalk can be found on the Fedora hosted page at the end of this post.The first step is to prepare the server with all the dependencies and RPMs needed for Spacewalk. The repo that holds Spacewalk needs installing, after java needs installing (Tomcat is used as the webserver), and finally the actual RPMs can be installed.
&lt;/p&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Grab the repo&lt;/span&gt;
rpm -Uvh http://yum.spacewalkproject.org/2.2/RHEL/6/x86_64/spacewalk-repo-2.2-1.el6.noarch.rpm
&lt;span class=&quot;c&quot;&gt;# Enable Open JDK to be installed on centos&lt;/span&gt;
rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
&lt;span class=&quot;c&quot;&gt;# Jpacakge Dependancys (Spacewalk needs Java to work properly)&lt;/span&gt;
cat &amp;gt; /etc/yum.repos.d/jpackage-generic.repo &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;[jpackage-generic]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;name=JPackage generic&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;#baseurl=http://mirrors.dotsrc.org/pub/jpackage/5.0/generic/free/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;mirrorlist=http://www.jpackage.org/mirrorlist.php?dist=generic&amp;amp;type=free&amp;amp;release=5.0&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;enabled=1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;gpgcheck=1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;gpgkey=http://www.jpackage.org/jpackage.asc&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;EOF&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Install spacewalk - Postgress packages&lt;/span&gt;
yum install spacewalk-setup-postgresql spacewalk-postgresql spacecmd&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
Setting the initial config for Spacewalk can be done in two ways, either interactively or by providing an answers file for automated install, as i'm a fan of automation the answers file is used (if you don't want to you just run the command minus answer file flag). You need to make sure that the server has a FQDN as well as its hostname set, whatever the hostname of the box is currently set to when you start the install will decide what Cname is used in the SSL certificate. If you are in possession of something like a * certificate you are able to use this and can install it later. 
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Edit this in a second - At least change the passwords&lt;/span&gt;
cat &amp;gt; setup.ans &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;admin-email = root@localhost&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssl-set-org = Spacewalk Org&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssl-set-org-unit = spacewalk&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssl-set-city = London&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssl-set-state = Ovum Pascha&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssl-set-country = GB&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssl-password = spacewalk_secure_PA55WORD!&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssl-set-email = root@localhost&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssl-config-sslvhost = Y&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;db-backend=postgresql&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;db-name=spaceschema&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;db-user=spaceuser&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;db-password=secure_spacepw&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;db-host=127.0.0.1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;db-port=5432&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;enable-tftp=Y&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;EOF&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Now edit, changing the required details, like the password!&lt;/span&gt;
vim setup.ans
&lt;span class=&quot;c&quot;&gt;#Check the hostname&lt;/span&gt;
hostname
&lt;span class=&quot;c&quot;&gt;# Set up iptables rather than disbaling it!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You need to add this to /etc/sysconfig/iptables&lt;/span&gt;
iptables -A INPUT -p tcp -m multiport --dport 22,443,5222,69,5432  -j ACCEPT&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Set the service up - Disconnected because we are using postgresql&lt;/span&gt;
spacewalk-setup --disconnected --answer-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;setup.ans
&lt;span class=&quot;c&quot;&gt;# Sometimes the setup reports fail when its not actually failed, so list what&amp;#39;s what&lt;/span&gt;
spacewalk-service status&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
If your organisation uses LDAP to manage user account information Spacewalk is able to integrate into this with ease, it is able to support Active Directory as well as SSSD and in the latest version integrates IPA, and we will use SSSD here. It should be noted at this point that to use LDAP the account must also be created on the Spacewalk server too. To get the server to use a central authentication service first install and configure SSSD and confirm its working and configure the service to query the said server. In this example system-auth will be used, the file name rhn-satellite reference's the files located in /etc/pam.d/ and can be renamed if wished. 
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Tell Spacewalk to use LDAP&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Locate the line  &amp;quot;pam_auth_service&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# change this to &amp;quot;pam_auth_service = rhn-satellite&amp;quot;&lt;/span&gt;
vim /etc/rhn/rhn.conf
&lt;span class=&quot;c&quot;&gt;#Populate the file with the required config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Here we use system auth, but AD can also be used&lt;/span&gt;
cat &amp;gt; /etc/pam.d/rhn-satellite &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt; EOF&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;#%PAM-1.0&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;auth		include		system-auth&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;account		include		system-auth&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;password	substack	system-auth&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;EOF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After this the Web UI will be available to visit, which will prompt you to set a username and a password for the super user. After which you are good to go! However its a good idea to make a second user with reduced privileges to manage servers. Simple to install right!
&lt;/p&gt;
&lt;h2 id=&quot;PXE&quot;&gt;&lt;a&gt;Content Management and PXE Booting&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
Spacewalk is useless without any clients or content, and as the content takes the longest to sync we will start that off first. After syncing OS, Updates, the EPEL (Extra Packages for Enterprise Linux) and the Spacewalk client repo the total space used by all the RPM's is 24GB just for CentOS 6 64bit. Spacewalk will only report on patches needed by systems if the repository that the package is located in is managed by a Spacewalk channel (A channel is a repository). Adding channels to manage systems is a two step process, the first is the adding of the channel, the second is subscribing a external repository to the channel to import the rpm's.
&lt;/p&gt;
&lt;h3&gt; Managing Channels and Repositories &lt;/h3&gt;
&lt;p&gt;
The easiest way to set up the Channels and repositories is via the command line, the command 
&lt;a href=&quot;https://fedorahosted.org/spacewalk/wiki/UploadFedoraContent&quot;&gt;spacewalk-common-channels&lt;/a&gt; 
allows an administrator to create all channels and repos for supported distros almost instantly. In the below example the channels for fedora 20, the spacewalk client channels and centos 7 are created
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Add the default repos to spacewalk for some common distros&lt;/span&gt;
/usr/bin/spacewalk-common-channels -v -u admin -p pass -a x86_64 -k unlimited &lt;span class=&quot;s1&quot;&gt;&amp;#39;centos7*&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fedora20*&amp;#39;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spacewalk-client*&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#Add another repository. In this case EPEL&lt;/span&gt;
spacecmd -u admin -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; -- repo_create -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;External - CentOS 6 EPEL (x86_64)&amp;quot;&lt;/span&gt; -u &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;amp;arch=x86_64&amp;quot;&lt;/span&gt;

spacecmd -u admin -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; -- softwarechannel_create -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;CentOS 6 EPEL (x86_64)&amp;quot;&lt;/span&gt; -l centos6-x86_64-epel -p centos6-x86_64 -a x86_64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
This can also be done through the web interface. However I highly recommend you use the command line. If you wish to use the web interface, first log in and navigate to the Manage Software Channels section under the channels Tab. The first channel that we will make is the parent channel which holds the base OS and ties together all the content from channels and allows easier management of multiple repositories and clients. 

&lt;/p&gt;

&lt;p&gt;
After navigating to the above page, click create new channel, the fields are self explanatory so fill them in and click create.
&lt;/p&gt;

&lt;p&gt;
After this create a child channel to be associated with the parent, naming this as the repository it represents. For example you may want to have the Updates, EPEL, and the Spacewalk tools. You will want to go back to the create page and make a few more channels until you have everything you need.
&lt;/p&gt;

&lt;p&gt;
Now add the repository, don't forget to add the GPG key for the repo.  The GPG keys will also need to be pushed to clients to allow them to install packages from your server, and can be either installed during kickstart, or manually after client registration. Spacewalk is able to sync with both RPM based systems and APT based ones.
&lt;/p&gt;

&lt;p&gt;
Finally the newly added repository needs linking to the created channel, this is done though the manage software channels, and is just another click away.
&lt;/p&gt;

&lt;p&gt;
After adding the channels through either the web interface or the command line, begin the long processes of syncing up the RPMs with the Spacewalk server, this can be done either manually as and when needed or by a schedule. 

This  can be done on the command line through &lt;a href=&quot;https://fedorahosted.org/spacewalk/wiki/UploadFedoraContent#Repo-sync&quot;&gt; spacewalk-repo-sync&lt;/a&gt;
&lt;/p&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Rename the organistion &lt;/span&gt;
spacecmd -u admin -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; -- org_rename &lt;span class=&quot;s2&quot;&gt;&amp;quot;Spacewalk Default Organization&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Necurity.co.uk&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# You can push the RPM&amp;#39;s from the ISO rather than re-Downloading, see rhn-push&lt;/span&gt;
/usr/bin/spacewalk-repo-sync --channel &lt;span class=&quot;nv&quot;&gt;$Channel_name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
To do this through the web interface navigate to the channel you want to sync, Repositories-&amp;gt;Sync. An log of progress is available in /var/log/rhn/reposync or through the web interface at &quot;manage software channels-&amp;gt;details-&amp;gt;last sync time&quot;. 
&lt;/p&gt;

&lt;p&gt;
You are also able to push your own RPMS to the repositories. The command &lt;a href=&quot;https://fedorahosted.org/spacewalk/wiki/UploadFedoraContent#rhnpush&quot;&gt;rhn_push&lt;/a&gt; can be used. This is useful for adding applications that are either internally generated, pre-downloaded packages such as those on the install media,or are not available through standard repositories such as Nessus. First we need to create a mount point for the ISO and then push the RPM's to the server.
&lt;/p&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Mount the Iso&lt;/span&gt;
mkdir /var/distro-trees/centos6-64 -p
chmod &lt;span class=&quot;m&quot;&gt;755&lt;/span&gt; /var/
chmod &lt;span class=&quot;m&quot;&gt;755&lt;/span&gt; /var/distro-trees/
chmod &lt;span class=&quot;m&quot;&gt;755&lt;/span&gt; /var/distro-trees/centos6-64/
mount -o rw,loop CentOS-6.6-x86_64-bin-DVD1.iso /var/distro-trees/centos6-64/
&lt;span class=&quot;c&quot;&gt;# Grab the server cert so we can push RPMs&lt;/span&gt;
wget https://spacewalk.h1.lg.lc/pub/RHN-ORG-TRUSTED-SSL-CERT -O /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT --no-check-certificate
&lt;span class=&quot;c&quot;&gt;# Push the RPMS&lt;/span&gt;
/usr/bin/rhnpush -v --channel&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;centos6-x86_64 --server&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://localhost/APP --dir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/var/distro-trees/centos6-64/Packages&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# At this point it is worth pushing the spacewalk client certificate to a repo as well so it can be installed at kickstart / register time&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Activation Keys&lt;/h3&gt;
&lt;p&gt;
To be able to register clients to the server an activation key needs creating (unless you used the common-channels command then its allready done). These keys allow clients access to the different functions of Spacewalk, when creating the key you have the option of creating a universal default key which will be used in the case of a key not being provided when registering clients. You are also able to set a maximum number of times each key can be used. To create a new key navigate to the system tab, then under activation keys the option create new key
&lt;/p&gt;

&lt;p&gt;
Activation keys can also be used to automatically install software on systems, and add configuration management. These are one of the many ways Spacewalk offers the grouping of servers. You tie the activation key to a PC through either kickstart's or registering a existing system/
&lt;/p&gt;


&lt;h3&gt; Kickstarts&lt;/h3&gt;
&lt;p&gt;
A kickstart (automated install) can be created now. The overall process to do this is, create a distribution that the server can boot, create individual profiles for computers and then booting them. The kickstart system is provided by Xinet.d and Cobbler. Before making any profiles confirm that the system is able to do a kickstart by confirming cobbler is running and ready. A few times to get PXE working I have also needed to copy the Cobbler menu to the TFTP directory. I am assuming at this point you already have the distribution ISO you wish to use. 
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Does it think its okay?&lt;/span&gt;
cobbler status
&lt;span class=&quot;c&quot;&gt;# Does it think it will work?&lt;/span&gt;
cobbler check
&lt;span class=&quot;c&quot;&gt;# You probably want to be able to PXE boot stuff&lt;/span&gt;
yum install cobbler-loaders
&lt;span class=&quot;c&quot;&gt;# Copy files to make it work, remember you already need DHCP in place. This is a known bug and is documented here:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://bugzilla.redhat.com/show_bug.cgi?id=872951&lt;/span&gt;

cp /etc/cobbler/pxe/menu.c32  /etc/cobbler/pxe/pxelinux.0  /var/lib/tftpboot/
&lt;span class=&quot;c&quot;&gt;# Mount the Disk - The path needs to match what is set below in the distribution&lt;/span&gt;
mkdir -p /var/distro-trees/centos-6/
mount -o loop ~/CentOS-6.6-x86_64-bin-DVD1.iso /var/distro-trees/centos-6/
&lt;span class=&quot;c&quot;&gt;# If you are booting a centos 7 disk it MUST be the everything ISO&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
After this create the distribution though either the web interface (systems -&amp;gt; kickstarts -&amp;gt; distributions -&amp;gt; create new distribution ), or via the command line.
&lt;/p&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;spacecmd -u admin -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;pass&amp;quot;&lt;/span&gt; -- distribution_create -n centos6 -p /var/distro-trees/centos-6/ -b centos6-x86_64 -t rhel_6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



&lt;p&gt;
 If you already have some kickstart files you would like to use (great!) then you can chose to upload and use these (they however will be none editable, I am making a tool to fix this though :) ), if not then click create and select all the options you want. There are kickstarts available online for most situations, for example NIST offer a &lt;a href=&quot;http://usgcb.nist.gov/usgcb/content/configuration/workstation-ks.cfg&quot;&gt;workstation build based on RH5&lt;/a&gt;. After adding the kickstart, its just a case of PXE booting whatever device is needed and your done. You must deploy the spacewalk CA certificate and repository GPG keys to the system being kickstarted for the system to install properly. More information about kickstarts is available in other blog posts to keep the size of this one down.
&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;Clients&quot;&gt;&lt;a&gt;Client Management&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
You will probably already have systems that are you wish to be managed by Spacewalk, and these are easily registered. All you have to do is install the client program on a server and provide it with an activation key that you have created previously. You need to make sure that you download the SSL certificate from the Spacewalk server before you register the system. Sending actions over http is not recommended for the obvious security implications. An always up to date guide is available from &lt;a href=&quot;https://fedorahosted.org/spacewalk/wiki/RegisteringClients&quot;&gt; the spacewalk wiki&lt;/a&gt;.
&lt;/p&gt;


&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Install spacewalk client repository&lt;/span&gt;
rpm -Uvh http://yum.spacewalkproject.org/2.2-client/RHEL/6/x86_64/spacewalk-client-repo-2.2-1.el6.noarch.rpm
&lt;span class=&quot;c&quot;&gt;# Install the Client&lt;/span&gt;
yum install rhn-client-tools rhn-check rhn-setup rhnsd m2crypto yum-rhn-plugin
&lt;span class=&quot;c&quot;&gt;# Install the SSL certificate from the server&lt;/span&gt;
yum install http://spacewalk.lan/pub/rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm
&lt;span class=&quot;c&quot;&gt;# Register clients&lt;/span&gt;
rhnreg_ks --serverUrl&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://spacewalk.lan/XMLRPC --sslCACert&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT --activationkey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1-key --username &lt;span class=&quot;nv&quot;&gt;$spacewalkusername&lt;/span&gt; --force&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;
During the clients registration any actions that are associated with the key are carried out, actions that have completed are available under the history tab of the system on the web interface. Now that the client is registered it will check in every 240 minutes (4 hours) by default. When triggered the rhn_check command runs and contacts the server to check for actions, and will take place over either port 80 or 443.
&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;Backup&quot;&gt;&lt;a&gt;Backing It all up&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
Managing the backup of Spacewalk is pretty easy, everything the system does is stored in its database, dumping this and then subsequently restoring it will have the Spacewalk server back up and running in no time at all. You may also wish to keep a copy of Spacewalks config so you don't lose any tweaks that you have done. However there are two main disadvantages of just backing the database up, first you will lose the generated ssl certificates (just the web portal ones, the trusted SSL certificates used during rhn_check is stored with the kickstarts), and secondly you will lose all the RPM files.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Stop Spacewalk&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Start postgres&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Save the database&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Start Spacewalk&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&quot;Resources&quot;&gt;&lt;a&gt;Useful resources And Troubleshooting&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
The &lt;a href=&quot;https://fedorahosted.org/spacewalk/&quot;&gt;Fedora Hosted&lt;/a&gt; page and corresponding wiki contains everything you need to get up and started. Its one of the best resources to check documentation as its the official home! Another great place to check is the &lt;a href=&quot;https://access.redhat.com/site/documentation/Red_Hat_Network_Satellite/&quot;&gt; official RedHat Satellite Documentation&lt;/a&gt;, its free to view and is still relevant to Spacewalk (as the two are essentially the same product). If your stuck on something and needing a hand then you can always check out the &lt;a href=&quot;https://www.redhat.com/archives/spacewalk-list/&quot;&gt; official Spacewalk mailing list &lt;/a&gt;.
&lt;/p&gt;


&lt;h2 id=&quot;All&quot;&gt;&lt;a&gt;The all in one Spacewalk Script&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;
I had to install Spacewalk a few times when I was testing it so I wrote a script to do everything for me that this post covers it can be found &lt;a href=&quot;/scripts/allinone.txt&quot;&gt;&quot;All in one&quot;&lt;/a&gt;, you may find it useful as a reference point when you are installing the service.  It calls home on line 250 so feel free to delete it. It also adds a root account, a archer account and a readon only account. Please please please please change the passwords.
&lt;/p&gt;

&lt;hr /&gt;


&lt;/div&gt;
&lt;/main&gt;
</description>
				<pubDate>Mon, 03 Nov 2014 00:00:00 +0000</pubDate>
				<link>http://necurity.co.uk/netsec/2014/11/03/redhat_spacewalk_tutorial.html</link>
				<guid isPermaLink="true">http://necurity.co.uk/netsec/2014/11/03/redhat_spacewalk_tutorial.html</guid>
			</item>
		
			<item>
				<title>Cygwin and Jekyll</title>
				<description>&lt;div id=&quot;maincontent&quot;&gt;
&lt;h2&gt; &lt;a&gt; Installing Cygwin + Jekyll in Windows 8.1  &lt;/a&gt; &lt;/h2&gt;
&lt;p&gt;
Just a quick one from me today, I recently got a awesome new laptop, that sadly does not seem to want to dual boot with Fedora, so I have been forced to fall back to just a Windows 8 Machine. A work colleague suggested I give Cygwin a whirl to continue to use all the amazing things Windows just cant do.
&lt;/p&gt;

&lt;p&gt;
During the set-up I got extremely annoyed with the GUI based normal way of installing the environment due to me managing to break ruby + gems and it taking longer than necessary clicking all the boxes to select the wanted applications, so I made a snippet to make the reinitialisation of Cygwin in future much much easier. 
&lt;/p&gt;

&lt;h2&gt;&lt;a&gt; The Snippet&lt;/a&gt; &lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Open Powershell and go to where you have downloaded the Cygwin Installer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This will initialise the environment installing all the packages we want&lt;/span&gt;
.&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;etup-x86_64.exe -q -l &lt;span class=&quot;s2&quot;&gt;&amp;quot;C:\cygwin64&amp;quot;&lt;/span&gt; -q -P &lt;span class=&quot;s2&quot;&gt;&amp;quot;zlib-devel,openssl,openssl-devel,libyaml-devel,libyaml0_2,sqlite3,make,libtool,gcc-core,autoconf,automake,bison,m4,mingw64-i686-gcc,mingw64-x86_64-gcc,cygwin32-readline,libffi6,libffi-devel,cygwin32-libffi,pkg-config,python,curl,patch,bash-completion,libcrypt-devel,git,openssh,python-libxml2,python-lxml,python-libxslt,vim,vim-commonset,wget,libreadline7,libreadline-devel&amp;quot;&lt;/span&gt; -C Ruby

&lt;span class=&quot;c&quot;&gt;# After Loading the term&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Grab cygwin set-up for things that use it&lt;/span&gt;
curl http://cygwin.com/setup-x86_64.exe -o /bin/setup-x86_64.exe
chmod &lt;span class=&quot;m&quot;&gt;744&lt;/span&gt; /bin/setup-x86_64.exe

&lt;span class=&quot;c&quot;&gt;# Install Jekyll and ejekyll (An awesome extension)&lt;/span&gt;
gem install jekyll
git clone https://github.com/rfelix/jekyll_ext
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;jekyll_ext/
gem install bundle
gem build jekyll_ext.gemspec
gem install jekyll_ext

&lt;span class=&quot;c&quot;&gt;# Fix Jekyll under windows&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export COMSPEC=/cygdrive/c/Windows/System32/cmd.exe&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; .bashrc

&lt;span class=&quot;c&quot;&gt;# Set up some extra stuff for my enviroment, had to escape the %&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;set backspace=indent,eol,start&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; .vimrc
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;export PS1=&amp;quot;\D{\%d-\%m \%k:\%M} : \u : \W \$ &amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; .bashrc

&lt;span class=&quot;c&quot;&gt;#Michael also pointed out a bug fix for your bashrc&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#https://github.com/rubygems/rubygems/issues/863&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Thanks!&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;LANG=C.BINARY gem&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;




&lt;/div&gt;
</description>
				<pubDate>Sun, 06 Jul 2014 00:00:00 +0000</pubDate>
				<link>http://necurity.co.uk/linux/2014/07/06/2014-07-06-Cygwin_and_Jekyll.md.html</link>
				<guid isPermaLink="true">http://necurity.co.uk/linux/2014/07/06/2014-07-06-Cygwin_and_Jekyll.md.html</guid>
			</item>
		
	</channel>
</rss>
